--- # install httpd server using ansible

- hosts: 127.0.0.1
  connection: local

  vars:
    user_name: icic
    group: icic
    passphrase: Riju@8100006942
    user_email: mail2susantasadhukhan@gmail.com

  tasks:
       - name: create a password for user {{user_name}}
         shell: python -c 'import crypt,getpass; print(crypt.crypt(getpass.getpass(), crypt.mksalt(crypt.METHOD_SHA512)))'
         register: password
           

       - name: set passsword
         set_fact: passwd='{{password.stdout}}'

       - name: set user {{user_name}} as a global variable
         set_fact: user_name='{{user_name}}'

       - name: set group {{group}} as a global variable
         set_fact: group='{{group}}'

       - name: set passphrase {{passphrase}} as a global variable
         set_fact: passphrase='{{passphrase}}' 

       - name: set user email  {{user_email}} as a global variable
         set_fact: email='{{user_email}}'     

       - debug:
           msg: '{{passwd}}'
           
        
       - name: create a directory for ssh user {{user_name}}
         file:
           path: ~/.ssh/{{group}}/{{user_name}}
           state: directory

       - name: create a ssh key for user {{user_name}}
         openssh_keypair:
            path: "~/.ssh/{{group}}/{{user_name}}/id_{{user_name}}"
            type: rsa
            size: 4096
            state: present
            force: no


       - name: encrypt private key for user {{user_name}}
         command: openssl rsa -in ~/.ssh/{{group}}/{{user_name}}/id_{{user_name}} -out ~/.ssh/{{group}}/{{user_name}}/id_{{user_name}}.pem       
         register: encrypt_private

       - debug:
          msg: "{{encrypt_private}}"


       - name: Convert private key for user {{user_name}} to PKCS8 format with passphrase
         community.crypto.openssl_privatekey_convert:
            src_path: ~/.ssh/{{group}}/{{user_name}}/id_{{user_name}}.pem
            dest_path: ~/.ssh/{{group}}/{{user_name}}/id_{{user_name}}.key
            dest_passphrase: '{{passphrase}}'
            format: pkcs8    
           
           

- hosts: demo
  user: ansadmin
  become: yes
  connection: ssh
  gather_facts: yes
          

  tasks:

    
     - name: set user {{hostvars['localhost']['user_name']}} as local scope
       set_fact: user="{{hostvars['localhost']['user_name']}}"

     - name: set group {{hostvars['localhost']['group']}} as local scope
       set_fact: group="{{hostvars['localhost']['group']}}"

     - debug: var=hostvars['localhost']['passwd']

     - debug:
         msg: "{{  hostvars['localhost']['passwd']  }}"

     - name: <<<========== Checking if a /home/{{user}}/.ssh/ exists or not ==============>>>
       stat:
            path: "/home/{{user}}/.ssh"
       register: ssh_path

     - name : <============ set variable for ssh_path if path not exist =============>
       set_fact: user_ssh_path=0

     - name: <============ set variable for ssh_path if path is exist =============>
       set_fact: user_ssh_path=1
       notify: send email
       when: ssh_path.stat.exists
   
    
     - name:  Make sure we have a {{group}} group
       group:
          name: '{{group}}'
          state: present

     - name: Allow the group {{group}} to have passwordless sudo
       lineinfile:
          dest: /etc/sudoers            
          state: present
          regexp: '^%{{user}}'
          # :ALL for root access , for specific action :/usr/bin/specific_action           
          line: '%{{group}} ALL=(ALL) NOPASSWD: /usr/bin/nano'
          validate: 'visudo -cf %s'

     - name: Creating user {{user}} with specific access
       user: 
         name: '{{user}}'
         password: "{{  hostvars['localhost']['passwd']  }}"
         groups: '{{group}}'
         state: present
         shell: /bin/bash
         system: yes
         createhome: yes
         home: /home/{{user}}
       become: yes
       become_method: "sudo"
   
     - name: Set up authorized keys for the user {{user}}
       authorized_key:
              user: '{{user}}'
              key: "{{item}}"

       with_file: 
          - /home/ansadmin/.ssh/{{group}}/{{user}}/id_{{user}}.pub 

     - name: check public dns for node
       command: curl http://checkip.amazonaws.com
       register: public_ip


     - name: set public ip
       set_fact: public_ip ='{{public_ip.stdout}}'
       notify: send email
  




- hosts: 127.0.0.1
  connection: local


  vars:
    user: "{{hostvars['localhost']['user_name']}}"
    group: "{{hostvars['localhost']['group']}}"
    passphrase: "{{hostvars['localhost']['passphrase']}}"
    public_ip: "{% for host in groups['demo'] %}  {{hostvars[host]['public_ip'].stdout,}}   {% endfor %}" 

    email: "{{hostvars['localhost']['email']}}"
    user_path: "{% for host in groups['demo'] %}{{hostvars[host]['user_ssh_path']}}{% endfor %}"    

  tasks:
        - debug:
             msg: "{{user_path}}" 
             #msg: "{% for host in groups['demo'] %}  {{hostvars[host]['public_ip'].stdout}}   {% endfor %}"
              #msg: "Hi {{user}}, your ssh private key passphrase {{passphrase}} and you are under a group {{group}}
                   # Your system public ip is/are {{public_ip}} your email address {{email}} 

              #"
        - name: enter SMPT server user name
          shell: python -c 'import crypt,getpass; print(getpass.getpass())'
          register: username

        - name: enter SMPT server password
          shell: python -c 'import crypt,getpass; print(getpass.getpass())'
          register: password
             
        - name: send email using gmail SMPT Server
          mail:
             host: smtp.gmail.com
             port: 587
             username: "aidevelopergroup@gmail.com"
             password: "Shreya@1998"
             to: "{{email}}"
             subject: SSH ACCESS
             subtype: html
             body: " Hi <h4>{{user_name}}</h4></br><p>your ssh private key passphrase <b>{{passphrase}}</b> and you are under a group <b>{{group}}</b>
                    Your system public ip is/are <b>{{public_ip}}</b> , you can connect remote server like <b>ssh -i private_key {{user}}@public_ip</b></p></br><p> never share private key with passphrase to anyone </p></br><p> If you face any kind of problem contact our devops administrator</p></br><p> <h3>Thank You</h3> </p>"

             attach: /home/ansadmin/.ssh/{{group}}/{{user}}/id_{{user}}.key
          delegate_to: localhost
          when: not "1" in user_path




   
 

